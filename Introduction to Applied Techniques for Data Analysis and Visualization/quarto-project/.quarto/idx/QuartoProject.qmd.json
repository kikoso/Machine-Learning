{"title":"Uso de bicicletas públicas en NYC: Un análisis estacional","markdown":{"yaml":{"title":"Uso de bicicletas públicas en NYC: Un análisis estacional","author":"Enrique López-Mañas","format":{"html":{"embed-resources":true,"toc":true,"toc-depth":3,"number-sections":true,"code-fold":true,"code-summary":"Mostrar Código"}},"editor":"visual"},"headingText":"1. Introducción","containsRefs":false,"markdown":"\n\n\nEste caso práctico tiene como objetivo analizar los patrones de uso del sistema de bicicletas públicas en la ciudad de Nueva York, específicamente el uso de Citi Bike, durante el año. Se explorarán diversas variables que pueden influir en el comportamiento de los usuarios, tales como la estacionalidad, las condiciones meteorológicas (como la lluvia), la modalidad de usuario (miembros frecuentes vs. usuarios ocasionales).\n\nLos análisis se centran en los siguientes aspectos:\n\n-   **Estacionalidad**: Se examinarán las variaciones en el uso de bicicletas según las estaciones del año (primavera, verano, otoño e invierno), evaluando factores como la duración de los viajes y la cantidad de usuarios por estación.\n\n-   **Condiciones Meteorológicas**: Se analizará el impacto de la lluvia en el uso de las bicicletas. Se compararán los patrones de uso en días con lluvia frente a días sin lluvia, observando si las condiciones climáticas afectan la cantidad de viajes realizados y la duración promedio de estos.\n\n-   **Modalidad de Usuario**: Se estudiarán las diferencias en el comportamiento de los usuarios según su modalidad (usuario ocasional vs. miembro), con el objetivo de identificar si hay variaciones en la frecuencia de uso, la duración de los viajes o las horas de mayor actividad entre estos grupos.\n\n-   **Impacto de Días Feriados y Festividades**: También se investigará cómo las festividades y días feriados pueden influir en el uso de Citi Bike, comparando la actividad en estos días con la de días laborables regulares.\n\nA través de estos análisis, se espera identificar patrones relevantes que puedan ayudar a entender mejor el comportamiento de los usuarios y su relación con las condiciones estacionales y meteorológicas, así como las diferencias de uso según características demográficas y especiales.\n\n### 1.1 Conjunto de datos utilizado\n\nPara este estudio se ha utilizado el conjunto de datos públicos proporcionado por **Citi Bike**, el sistema de bicicletas compartidas de la ciudad de Nueva York. Los datos están disponibles en el portal oficial de datos de Citi Bike y contienen información detallada sobre cada viaje realizado con este servicio.\n\n### 1.2 Origen de los datos\n\nLos archivos descargados corresponden a los viajes realizados durante el año desde el año 2024. Cada mes está representado por un archivo CSV independiente, con aproximadamente 1 millón de registros por mes. Los archivos han sido descargados, almacenados en una carpeta local llamada `data/`, y posteriormente leídos y combinados en un único marco de datos (`data frame`) para su análisis.\n\n### 1.3 Variables utilizadas\n\nEl conjunto de datos original contiene las siguientes variables:\n\n-   `ride_id`: identificador único del viaje.\n\n-   `rideable_type`: tipo de bicicleta utilizada (clásica, eléctrica o dockless).\n\n-   `started_at`: fecha y hora de inicio del viaje.\n\n-   `ended_at`: fecha y hora de finalización del viaje.\n\n-   `start_station_name`: nombre de la estación de inicio.\n\n-   `start_station_id`: identificador de la estación de inicio.\n\n-   `end_station_name`: nombre de la estación de destino.\n\n-   `end_station_id`: identificador de la estación de destino.\n\n-   `start_lat`, `start_lng`: coordenadas geográficas de inicio.\n\n-   `end_lat`, `end_lng`: coordenadas geográficas de destino.\n\n-   `member_casual`: tipo de usuario (`member` para usuarios suscritos o `casual` para usuarios esporádicos).\n\n> Nota: Los datos **no incluyen variables directamente relacionadas con el género o la edad del usuario**, por lo que el análisis se limita al tipo de usuario (`member_casual`) como única variable sociodemográfica.\n\n### 1.4 Proceso de normalización y limpieza\n\nDado que los archivos mensuales no eran completamente homogéneos (por ejemplo, algunas columnas como `start_station_id` aparecían como tipo `double` en unos archivos y `character` en otros), se ha realizado una **normalización previa de tipos** al momento de la lectura de los datos. Se forzaron los identificadores de estaciones (`start_station_id` y `end_station_id`) a tipo `character` para evitar conflictos de tipo.\n\nAdicionalmente, se crearon nuevas variables derivadas para facilitar el análisis temporal:\n\n-   `duration`: duración del viaje en minutos, calculada como la diferencia entre `ended_at` y `started_at`.\n\n-   `month`: mes del año extraído de la fecha de inicio.\n\n-   `day_of_week`: día de la semana en que se realizó el viaje.\n\n-   `season`: estación del año, clasificada según el mes (`Invierno`, `Primavera`, `Verano`, `Otoño`).\n\nTambién se eliminaron registros con duraciones negativas o superiores a 24 horas, por considerarse errores de medición o viajes atípicos.\n\n## 2. Dimensión del conjunto final\n\nDespués del preprocesamiento y la combinación de los archivos, el conjunto de datos resultante contiene aproximadamente **40 millones de registros**, lo que permite realizar un análisis estadístico representativo y robusto del uso del sistema Citi Bike a lo largo del año 2023.\n\n### 2.1 Verificación de la compatibilidad de columnas\n\nAntes de combinar los archivos CSV, es importante verificar que todos los archivos tengan las mismas columnas. Esto asegura que los datos se fusionen correctamente sin errores relacionados con columnas incompatibles.\n\n#### Paso 1: Listar las columnas de cada archivo\n\nSe comenzó por listar los encabezados de cada archivo CSV para identificar las columnas presentes en cada uno de ellos. Esto se realizó utilizando la función `read_csv()` con el argumento `n_max = 0`, lo que permite leer solo las cabeceras del archivo sin cargar los datos completos.\n\n```{r}\noptions(repos = c(CRAN = \"https://cloud.r-project.org\"))\ninstall.packages(\"purrr\")\ninstall.packages(\"readr\")\nlibrary(purrr)\nlibrary(readr)\n\n# Listar archivos CSV en la carpeta de datos\nfiles <- list.files(path = \"data/\", pattern = \"*.csv\", full.names = TRUE)\n\n# Leer los encabezados de cada archivo\ncolumn_lists <- map(files, ~ names(read_csv(.x, n_max = 0)))\n\n# Ver las columnas de cada archivo\nnames(column_lists) <- basename(files)\ncolumn_lists\n\n```\n\n#### Paso 2: Combinar columnas\n\nEl proceso de combinación de columnas tiene como objetivo unificar múltiples archivos CSV en un único conjunto de datos limpio y consistente. Primero, se cargan los archivos desde la carpeta \"data\" y se eliminan las columnas duplicadas. Luego, se identifican las columnas comunes entre todos los archivos para asegurar que todos tengan la misma estructura. En caso de que falten columnas en algunos archivos, se añaden con valores NA y se reordenan según las columnas comunes. Además, se garantiza que las columnas de identificadores de estaciones tengan tipos de datos consistentes. Finalmente, los archivos estandarizados se combinan en un único conjunto de datos con bind_rows(), asegurando que las filas de cada archivo se agreguen de manera coherente.\n\n```{r}\n# Cargar las librerías necesarias\nlibrary(dplyr)\nlibrary(readr)\nlibrary(tibble)\nlibrary(purrr)\n\n# Definir el conjunto de archivos CSV a leer\nfiles <- list.files(path = \"data/\", pattern = \"*.csv\", full.names = TRUE)\n\n# Verificar si los archivos existen\nif(length(files) == 0) {\n  stop(\"No se encontraron archivos CSV en la ruta especificada.\")\n}\n\n# Paso 1: Leer los archivos y almacenar las columnas\ncleaned_files <- map(files, function(file) {\n  data <- read_csv(file)\n  # Eliminar columnas duplicadas, si existen (por ejemplo, 'rideable_type_duplicate_column_name_1')\n  data <- data %>% select(-contains(\"duplicate_column_name\"))\n  return(data)\n})\n\n# Verificar las columnas de los archivos limpiados\ncleaned_column_lists <- map(cleaned_files, names)\n\n# Paso 2: Identificar las columnas comunes\nif (length(cleaned_column_lists) > 0) {\n  common_cols_cleaned <- reduce(cleaned_column_lists, intersect)\n} else {\n  stop(\"No se encontraron columnas comunes entre los archivos.\")\n}\n\n# Mostrar las columnas comunes\nprint(\"Columnas comunes entre todos los archivos:\")\nprint(common_cols_cleaned)\n\n# Paso 3: Asegurarnos de que todos los archivos tengan las mismas columnas comunes y tipos de datos consistentes\nstandardized_files <- map(cleaned_files, function(data) {\n  missing_cols <- setdiff(common_cols_cleaned, names(data))\n  # Añadir las columnas faltantes con valores NA\n  data <- data %>% add_column(!!!setNames(rep(list(NA), length(missing_cols)), missing_cols), .after = 0)\n  # Reordenar las columnas según las columnas comunes\n  data <- data %>% select(all_of(common_cols_cleaned))\n  \n  # Convertir las columnas a tipos consistentes\n  # Convertir 'start_station_id' y 'end_station_id' a character en todos los archivos\n  data <- data %>% mutate(\n    across(starts_with(\"start_station_id\"), as.character),\n    across(starts_with(\"end_station_id\"), as.character)\n  )\n  \n  return(data)\n})\n\n# Paso 4: Combinar los archivos\ncitibike_data_cleaned <- bind_rows(standardized_files)\n\n# Mostrar las primeras filas del conjunto de datos combinado\nhead(citibike_data_cleaned)\n\n# Guardar el archivo combinado limpio en un archivo CSV\n# write_csv(citibike_data_cleaned, \"citibike_combined_cleaned.csv\")\n\n# Resumen del proceso de limpieza y combinación\n#summary(citibike_data_cleaned)\n```\n\n#### Paso 3: Procesamiento por bloques y transformación de datos\n\nEn este paso, se define la función procesar_en_bloques para procesar grandes volúmenes de datos de manera eficiente. Dado que el conjunto de datos puede ser muy grande, se divide en bloques de tamaño especificado (por defecto, 1 millón de filas). La función recorre cada bloque de datos, aplicando varias transformaciones: convierte las fechas de inicio y fin de cada viaje a formato POSIX, calcula la duración del viaje en minutos, extrae el mes, el día de la semana y asigna una estación del año (primavera, verano, otoño, invierno) en función del mes de inicio. Los resultados de cada bloque se almacenan y luego se combinan utilizando bind_rows(). Finalmente, se libera memoria con gc() para optimizar el rendimiento del proceso.\n\n```{r}\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(fasttime)\n\nrm(cleaned_files)\n\nprocesar_en_bloques <- function(data, tamano_bloque = 1e6) {\n  n <- nrow(data)\n  bloques <- ceiling(n / tamano_bloque)\n  \n  resultado <- vector(\"list\", bloques)\n  \n  for (i in seq_len(bloques)) {\n    cat(\"Procesando bloque\", i, \"de\", bloques, \"...\\n\")\n    \n    tiempo_inicio <- Sys.time()\n    \n    inicio <- ((i - 1) * tamano_bloque) + 1\n    fin <- min(i * tamano_bloque, n)\n    \n    bloque <- data[inicio:fin, ] %>%\n      mutate(\n        started_at = fastPOSIXct(started_at),\n        ended_at = fastPOSIXct(ended_at),\n        duration = as.numeric(difftime(ended_at, started_at, units = \"mins\")),\n        month = month(started_at, label = TRUE),\n        day_of_week = wday(started_at, label = TRUE),\n        season = case_when(\n          month(started_at) %in% c(12, 1, 2) ~ \"Invierno\",\n          month(started_at) %in% c(3, 4, 5) ~ \"Primavera\",\n          month(started_at) %in% c(6, 7, 8) ~ \"Verano\",\n          month(started_at) %in% c(9, 10, 11) ~ \"Otoño\"\n        )\n      )\n    \n    resultado[[i]] <- bloque\n    \n    tiempo_fin <- Sys.time()\n    duracion <- round(difftime(tiempo_fin, tiempo_inicio, units = \"secs\"), 2)\n    cat(\"Bloque\", i, \"procesado en\", duracion, \"segundos.\\n\\n\")\n  \n  }\n  \n  bind_rows(resultado)\n}\n\ncitibike_data_cleaned <- procesar_en_bloques(citibike_data_cleaned, tamano_bloque = 1e5)\n\n  \ngc()  # Liberar memoria\n\n```\n\n### 2.2. Verificación de carga de datos\n\nEn esta sección, se verifica la cantidad de filas de cada archivo CSV leído para asegurarse de que todos los archivos se han cargado correctamente. La función map_int() se utiliza para contar las filas de cada archivo y luego se imprime el resultado para su revisión.\n\n```{r}\n# Verificar cuántas filas tiene cada archivo CSV leído\ntibble(archivo = files) %>%\n  mutate(filas = map_int(archivo, ~nrow(read_csv(.x)))) %>%\n  print(n = Inf)\n```\n\n## 3. Análisis exploratorio de los datos\n\n### 3.1. Resumen de los datos\n\nEsta sección proporciona una vista general del conjunto de datos limpio utilizando la función glimpse(), que muestra la estructura y las primeras filas de los datos. Además, se calculan estadísticas descriptivas de la variable duration para obtener una comprensión básica de la distribución de la duración de los viajes en el sistema de bicicletas.\n\n```{r}\n# Vista general de los datos\nglimpse(citibike_data_cleaned)\n\n# Estadísticas descriptivas de la duración de los viajes\nsummary(citibike_data_cleaned$duration)\n\n```\n\n### 3.2. Número de viajes por estación del año\n\nEn esta sección, se analiza el número de viajes realizados en el sistema de bicicletas por estación del año. Se transforma la variable season en un factor con el orden correcto de las estaciones (Primavera, Verano, Otoño, Invierno) y luego se cuenta el número de viajes por cada estación utilizando count(). Los resultados se visualizan en un gráfico de barras (geom_col()), con el eje X representando las estaciones y el eje Y el número de viajes.\n\n```{r}\ncitibike_data_cleaned %>%\n  mutate(season = factor(season, levels = c(\"Primavera\", \"Verano\", \"Otoño\", \"Invierno\"))) %>%\n  count(season) %>%\n  ggplot(aes(x = season, y = n, fill = season)) +\n  geom_col() +\n  labs(title = \"Número de viajes por estación del año\", x = \"Estación\", y = \"Número de viajes\") +\n  theme_minimal()\n\n```\n\n### 3.3. Distribución de viajes por tipo de usuario\n\nEn esta sección, se analiza la distribución de los viajes según el tipo de usuario, diferenciando entre miembros registrados y usuarios ocasionales (member_casual). Se cuenta el número de viajes realizados por cada tipo de usuario utilizando count(), y los resultados se visualizan mediante un gráfico de barras (geom_col()), con el eje X representando los tipos de usuario y el eje Y el número de viajes realizados. Esto permite observar cómo se distribuyen los viajes entre los usuarios frecuentes y los esporádicos.\n\n```{r}\ncitibike_data_cleaned %>%\n  count(member_casual) %>%\n  ggplot(aes(x = member_casual, y = n, fill = member_casual)) +\n  geom_col() +\n  labs(title = \"Distribución de viajes por tipo de usuario\", x = \"Tipo de usuario\", y = \"Número de viajes\") +\n  theme_minimal()\n\n```\n\n### 3.4. Duración promedio de los viajes por tipo de usuario\n\nEn este análisis se evalúa la duración promedio de los viajes en función del tipo de usuario, diferenciando entre miembros registrados y usuarios ocasionales (member_casual). Se calcula la duración promedio de los viajes agrupados por tipo de usuario y luego se visualiza utilizando un gráfico de barras. El gráfico permite observar las diferencias en la duración de los viajes entre los usuarios frecuentes y los esporádicos, lo cual puede ser útil para entender los patrones de uso del sistema de bicicletas.\n\n```{r}\ncitibike_data_cleaned %>%\n  group_by(member_casual) %>%\n  summarise(avg_duration = mean(duration, na.rm = TRUE)) %>%\n  ggplot(aes(x = member_casual, y = avg_duration, fill = member_casual)) +\n  geom_col() +\n  labs(title = \"Duración promedio de los viajes por tipo de usuario\", x = \"Tipo de usuario\", y = \"Duración promedio (minutos)\") +\n  theme_minimal()\n\n```\n\n### 3.5 Análisis del tipo de bicicleta\n\n```{r}\nlibrary(dplyr)\nlibrary(ggplot2)\n\n# Agrupar por tipo de bicicleta y contar\nbike_type_count <- citibike_data_cleaned %>%\n  filter(!is.na(rideable_type)) %>%\n  count(rideable_type, sort = TRUE)\n\n# Gráfico de barras\nggplot(bike_type_count, aes(x = reorder(rideable_type, n), y = n, fill = rideable_type)) +\n  geom_col() +\n  labs(title = \"Número de viajes por tipo de bicicleta\",\n       x = \"Tipo de bicicleta\",\n       y = \"Número de viajes\") +\n  theme_minimal() +\n  scale_fill_viridis_d()\n```\n\n## 4. Análisis Temporal Detallado\n\nEste análisis examina la evolución temporal de los viajes en el sistema de bicicletas, desglosado por tipo de usuario (miembro registrado vs. usuario ocasional). Para ello, se agrupan los datos por mes y tipo de usuario, y se calcula el total de viajes en cada periodo. El gráfico resultante muestra cómo varía el número de viajes mensualmente, permitiendo observar tendencias a lo largo del tiempo, y comparar el comportamiento de los usuarios frecuentes y esporádicos.\n\n### 4.1 Evolución Mensual de Viajes\n\n```{r}\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(lubridate)\n\n# Agrupar por mes y tipo de usuario\nmonthly_trips <- citibike_data_cleaned %>%\n  mutate(month = floor_date(started_at, \"month\")) %>%\n  group_by(month, member_casual) %>%\n  summarise(total_trips = n(), .groups = \"drop\")\n\n# Gráfico\nggplot(monthly_trips, aes(x = month, y = total_trips, color = member_casual)) +\n  geom_line(size = 1.2) +\n  labs(\n    title = \"Evolución mensual de viajes en Citi Bike\",\n    x = \"Mes\",\n    y = \"Número de viajes\",\n    color = \"Tipo de usuario\"\n  ) +\n  theme_minimal()\n\n```\n\n### 4.2 Viajes por Día de la Semana\n\n```{r}\n# Extraer día de la semana\ncitibike_data_cleaned <- citibike_data_cleaned %>%\n  mutate(weekday = wday(started_at, label = TRUE, week_start = 1))\n\n# Agrupar\nweekday_trips <- citibike_data_cleaned %>%\n  group_by(weekday, member_casual) %>%\n  summarise(total_trips = n(), .groups = \"drop\")\n\n# Gráfico\nggplot(weekday_trips, aes(x = weekday, y = total_trips, fill = member_casual)) +\n  geom_col(position = \"dodge\") +\n  labs(\n    title = \"Viajes por día de la semana\",\n    x = \"Día\",\n    y = \"Número de viajes\",\n    fill = \"Tipo de usuario\"\n  ) +\n  theme_minimal()\n\n```\n\n### 4.3 Distribución Horaria de Viajes\n\n```{r}\n# Extraer hora de inicio\ncitibike_data_cleaned <- citibike_data_cleaned %>%\n  mutate(hour = hour(started_at))\n\n# Gráfico\nggplot(citibike_data_cleaned, aes(x = hour, fill = member_casual)) +\n  geom_histogram(binwidth = 1, position = \"dodge\", color = \"black\") +\n  scale_x_continuous(breaks = 0:23) +\n  labs(\n    title = \"Distribución horaria de los viajes\",\n    x = \"Hora del día\",\n    y = \"Número de viajes\",\n    fill = \"Tipo de usuario\"\n  ) +\n  theme_minimal()\n\n```\n\n### 4.4. Duración promedio por estación del año\n\n```{r}\nlibrary(dplyr)\nlibrary(ggplot2)\n\ncitibike_data_cleaned %>%\n  group_by(season) %>%\n  summarise(avg_duration = mean(duration, na.rm = TRUE)) %>%\n  mutate(season = factor(season, levels = c(\"Primavera\", \"Verano\", \"Otoño\", \"Invierno\"))) %>%\n  ggplot(aes(x = season, y = avg_duration, fill = season)) +\n  geom_col() +\n  labs(title = \"Duración promedio por estación del año\", y = \"Duración (minutos)\")\n\n```\n\n### 4.5. Duración media del viaje por tipo de bicicleta\n\n```{r}\nlibrary(dplyr)\nlibrary(ggplot2)\n\n# Calcular la duración media por tipo de bicicleta\nbike_type_duration <- citibike_data_cleaned %>%\n  group_by(rideable_type) %>%\n  summarise(avg_duration = mean(duration, na.rm = TRUE))\n\n# Crear la gráfica\nggplot(bike_type_duration, aes(x = rideable_type, y = avg_duration, fill = rideable_type)) +\n  geom_col() +\n  labs(title = \"Duración promedio por tipo de bicicleta\", x = \"Tipo de bicicleta\", y = \"Duración promedio (minutos)\") +\n  theme_minimal()\n```\n\n## 5. Análisis Espacial de los Viajes\n\n### 5.1. Densidad de Viajes por Estación\n\n```{r}\nlibrary(dplyr)\nlibrary(ggplot2)\ninstall.packages(\"viridis\")   # Solo la primera vez\nlibrary(viridis)\n\n# Agrupar por estaciones de inicio\nstation_density <- citibike_data_cleaned %>%\n  group_by(start_station_name, start_lat, start_lng) %>%\n  summarise(total_trips = n(), .groups = \"drop\")\n\n# Crear el mapa de densidad de estaciones de inicio\nggplot(station_density, aes(x = start_lng, y = start_lat)) +\n  geom_point(aes(size = total_trips, color = total_trips), alpha = 0.7) +\n  scale_color_viridis() +\n  scale_size_continuous(range = c(1, 10)) +\n  labs(title = \"Densidad de viajes por estación de inicio\", x = \"Longitud\", y = \"Latitud\", size = \"Total de viajes\", color = \"Total de viajes\") +\n  theme_minimal()\n\n```\n\n### 5.2. Análisis de Viajes Más Frecuentes: Estaciones de Origen y Destino\n\n```{r}\nlibrary(dplyr)\nlibrary(ggplot2)\n\n# Top 10 estaciones de origen más frecuentes\ntop_start_stations <- citibike_data_cleaned %>%\n  filter(!is.na(start_station_name)) %>%\n  count(start_station_name, sort = TRUE) %>%\n  slice_max(n, n = 10)\n\n# Gráfica de estaciones de origen\nggplot(top_start_stations, aes(x = reorder(start_station_name, n), y = n, fill = start_station_name)) +\n  geom_col(show.legend = FALSE) +\n  coord_flip() +\n  labs(title = \"Top 10 estaciones de origen\",\n       x = \"Estación de inicio\",\n       y = \"Número de viajes\") +\n  theme_minimal()\n\n# Top 10 estaciones de destino más frecuentes\ntop_end_stations <- citibike_data_cleaned %>%\n  filter(!is.na(end_station_name)) %>%\n  count(end_station_name, sort = TRUE) %>%\n  slice_max(n, n = 10)\n\n# Gráfica de estaciones de destino\nggplot(top_end_stations, aes(x = reorder(end_station_name, n), y = n, fill = end_station_name)) +\n  geom_col(show.legend = FALSE) +\n  coord_flip() +\n  labs(title = \"Top 10 estaciones de destino\",\n       x = \"Estación de destino\",\n       y = \"Número de viajes\") +\n  theme_minimal()\n```\n","srcMarkdownNoYaml":"\n\n## 1. Introducción\n\nEste caso práctico tiene como objetivo analizar los patrones de uso del sistema de bicicletas públicas en la ciudad de Nueva York, específicamente el uso de Citi Bike, durante el año. Se explorarán diversas variables que pueden influir en el comportamiento de los usuarios, tales como la estacionalidad, las condiciones meteorológicas (como la lluvia), la modalidad de usuario (miembros frecuentes vs. usuarios ocasionales).\n\nLos análisis se centran en los siguientes aspectos:\n\n-   **Estacionalidad**: Se examinarán las variaciones en el uso de bicicletas según las estaciones del año (primavera, verano, otoño e invierno), evaluando factores como la duración de los viajes y la cantidad de usuarios por estación.\n\n-   **Condiciones Meteorológicas**: Se analizará el impacto de la lluvia en el uso de las bicicletas. Se compararán los patrones de uso en días con lluvia frente a días sin lluvia, observando si las condiciones climáticas afectan la cantidad de viajes realizados y la duración promedio de estos.\n\n-   **Modalidad de Usuario**: Se estudiarán las diferencias en el comportamiento de los usuarios según su modalidad (usuario ocasional vs. miembro), con el objetivo de identificar si hay variaciones en la frecuencia de uso, la duración de los viajes o las horas de mayor actividad entre estos grupos.\n\n-   **Impacto de Días Feriados y Festividades**: También se investigará cómo las festividades y días feriados pueden influir en el uso de Citi Bike, comparando la actividad en estos días con la de días laborables regulares.\n\nA través de estos análisis, se espera identificar patrones relevantes que puedan ayudar a entender mejor el comportamiento de los usuarios y su relación con las condiciones estacionales y meteorológicas, así como las diferencias de uso según características demográficas y especiales.\n\n### 1.1 Conjunto de datos utilizado\n\nPara este estudio se ha utilizado el conjunto de datos públicos proporcionado por **Citi Bike**, el sistema de bicicletas compartidas de la ciudad de Nueva York. Los datos están disponibles en el portal oficial de datos de Citi Bike y contienen información detallada sobre cada viaje realizado con este servicio.\n\n### 1.2 Origen de los datos\n\nLos archivos descargados corresponden a los viajes realizados durante el año desde el año 2024. Cada mes está representado por un archivo CSV independiente, con aproximadamente 1 millón de registros por mes. Los archivos han sido descargados, almacenados en una carpeta local llamada `data/`, y posteriormente leídos y combinados en un único marco de datos (`data frame`) para su análisis.\n\n### 1.3 Variables utilizadas\n\nEl conjunto de datos original contiene las siguientes variables:\n\n-   `ride_id`: identificador único del viaje.\n\n-   `rideable_type`: tipo de bicicleta utilizada (clásica, eléctrica o dockless).\n\n-   `started_at`: fecha y hora de inicio del viaje.\n\n-   `ended_at`: fecha y hora de finalización del viaje.\n\n-   `start_station_name`: nombre de la estación de inicio.\n\n-   `start_station_id`: identificador de la estación de inicio.\n\n-   `end_station_name`: nombre de la estación de destino.\n\n-   `end_station_id`: identificador de la estación de destino.\n\n-   `start_lat`, `start_lng`: coordenadas geográficas de inicio.\n\n-   `end_lat`, `end_lng`: coordenadas geográficas de destino.\n\n-   `member_casual`: tipo de usuario (`member` para usuarios suscritos o `casual` para usuarios esporádicos).\n\n> Nota: Los datos **no incluyen variables directamente relacionadas con el género o la edad del usuario**, por lo que el análisis se limita al tipo de usuario (`member_casual`) como única variable sociodemográfica.\n\n### 1.4 Proceso de normalización y limpieza\n\nDado que los archivos mensuales no eran completamente homogéneos (por ejemplo, algunas columnas como `start_station_id` aparecían como tipo `double` en unos archivos y `character` en otros), se ha realizado una **normalización previa de tipos** al momento de la lectura de los datos. Se forzaron los identificadores de estaciones (`start_station_id` y `end_station_id`) a tipo `character` para evitar conflictos de tipo.\n\nAdicionalmente, se crearon nuevas variables derivadas para facilitar el análisis temporal:\n\n-   `duration`: duración del viaje en minutos, calculada como la diferencia entre `ended_at` y `started_at`.\n\n-   `month`: mes del año extraído de la fecha de inicio.\n\n-   `day_of_week`: día de la semana en que se realizó el viaje.\n\n-   `season`: estación del año, clasificada según el mes (`Invierno`, `Primavera`, `Verano`, `Otoño`).\n\nTambién se eliminaron registros con duraciones negativas o superiores a 24 horas, por considerarse errores de medición o viajes atípicos.\n\n## 2. Dimensión del conjunto final\n\nDespués del preprocesamiento y la combinación de los archivos, el conjunto de datos resultante contiene aproximadamente **40 millones de registros**, lo que permite realizar un análisis estadístico representativo y robusto del uso del sistema Citi Bike a lo largo del año 2023.\n\n### 2.1 Verificación de la compatibilidad de columnas\n\nAntes de combinar los archivos CSV, es importante verificar que todos los archivos tengan las mismas columnas. Esto asegura que los datos se fusionen correctamente sin errores relacionados con columnas incompatibles.\n\n#### Paso 1: Listar las columnas de cada archivo\n\nSe comenzó por listar los encabezados de cada archivo CSV para identificar las columnas presentes en cada uno de ellos. Esto se realizó utilizando la función `read_csv()` con el argumento `n_max = 0`, lo que permite leer solo las cabeceras del archivo sin cargar los datos completos.\n\n```{r}\noptions(repos = c(CRAN = \"https://cloud.r-project.org\"))\ninstall.packages(\"purrr\")\ninstall.packages(\"readr\")\nlibrary(purrr)\nlibrary(readr)\n\n# Listar archivos CSV en la carpeta de datos\nfiles <- list.files(path = \"data/\", pattern = \"*.csv\", full.names = TRUE)\n\n# Leer los encabezados de cada archivo\ncolumn_lists <- map(files, ~ names(read_csv(.x, n_max = 0)))\n\n# Ver las columnas de cada archivo\nnames(column_lists) <- basename(files)\ncolumn_lists\n\n```\n\n#### Paso 2: Combinar columnas\n\nEl proceso de combinación de columnas tiene como objetivo unificar múltiples archivos CSV en un único conjunto de datos limpio y consistente. Primero, se cargan los archivos desde la carpeta \"data\" y se eliminan las columnas duplicadas. Luego, se identifican las columnas comunes entre todos los archivos para asegurar que todos tengan la misma estructura. En caso de que falten columnas en algunos archivos, se añaden con valores NA y se reordenan según las columnas comunes. Además, se garantiza que las columnas de identificadores de estaciones tengan tipos de datos consistentes. Finalmente, los archivos estandarizados se combinan en un único conjunto de datos con bind_rows(), asegurando que las filas de cada archivo se agreguen de manera coherente.\n\n```{r}\n# Cargar las librerías necesarias\nlibrary(dplyr)\nlibrary(readr)\nlibrary(tibble)\nlibrary(purrr)\n\n# Definir el conjunto de archivos CSV a leer\nfiles <- list.files(path = \"data/\", pattern = \"*.csv\", full.names = TRUE)\n\n# Verificar si los archivos existen\nif(length(files) == 0) {\n  stop(\"No se encontraron archivos CSV en la ruta especificada.\")\n}\n\n# Paso 1: Leer los archivos y almacenar las columnas\ncleaned_files <- map(files, function(file) {\n  data <- read_csv(file)\n  # Eliminar columnas duplicadas, si existen (por ejemplo, 'rideable_type_duplicate_column_name_1')\n  data <- data %>% select(-contains(\"duplicate_column_name\"))\n  return(data)\n})\n\n# Verificar las columnas de los archivos limpiados\ncleaned_column_lists <- map(cleaned_files, names)\n\n# Paso 2: Identificar las columnas comunes\nif (length(cleaned_column_lists) > 0) {\n  common_cols_cleaned <- reduce(cleaned_column_lists, intersect)\n} else {\n  stop(\"No se encontraron columnas comunes entre los archivos.\")\n}\n\n# Mostrar las columnas comunes\nprint(\"Columnas comunes entre todos los archivos:\")\nprint(common_cols_cleaned)\n\n# Paso 3: Asegurarnos de que todos los archivos tengan las mismas columnas comunes y tipos de datos consistentes\nstandardized_files <- map(cleaned_files, function(data) {\n  missing_cols <- setdiff(common_cols_cleaned, names(data))\n  # Añadir las columnas faltantes con valores NA\n  data <- data %>% add_column(!!!setNames(rep(list(NA), length(missing_cols)), missing_cols), .after = 0)\n  # Reordenar las columnas según las columnas comunes\n  data <- data %>% select(all_of(common_cols_cleaned))\n  \n  # Convertir las columnas a tipos consistentes\n  # Convertir 'start_station_id' y 'end_station_id' a character en todos los archivos\n  data <- data %>% mutate(\n    across(starts_with(\"start_station_id\"), as.character),\n    across(starts_with(\"end_station_id\"), as.character)\n  )\n  \n  return(data)\n})\n\n# Paso 4: Combinar los archivos\ncitibike_data_cleaned <- bind_rows(standardized_files)\n\n# Mostrar las primeras filas del conjunto de datos combinado\nhead(citibike_data_cleaned)\n\n# Guardar el archivo combinado limpio en un archivo CSV\n# write_csv(citibike_data_cleaned, \"citibike_combined_cleaned.csv\")\n\n# Resumen del proceso de limpieza y combinación\n#summary(citibike_data_cleaned)\n```\n\n#### Paso 3: Procesamiento por bloques y transformación de datos\n\nEn este paso, se define la función procesar_en_bloques para procesar grandes volúmenes de datos de manera eficiente. Dado que el conjunto de datos puede ser muy grande, se divide en bloques de tamaño especificado (por defecto, 1 millón de filas). La función recorre cada bloque de datos, aplicando varias transformaciones: convierte las fechas de inicio y fin de cada viaje a formato POSIX, calcula la duración del viaje en minutos, extrae el mes, el día de la semana y asigna una estación del año (primavera, verano, otoño, invierno) en función del mes de inicio. Los resultados de cada bloque se almacenan y luego se combinan utilizando bind_rows(). Finalmente, se libera memoria con gc() para optimizar el rendimiento del proceso.\n\n```{r}\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(fasttime)\n\nrm(cleaned_files)\n\nprocesar_en_bloques <- function(data, tamano_bloque = 1e6) {\n  n <- nrow(data)\n  bloques <- ceiling(n / tamano_bloque)\n  \n  resultado <- vector(\"list\", bloques)\n  \n  for (i in seq_len(bloques)) {\n    cat(\"Procesando bloque\", i, \"de\", bloques, \"...\\n\")\n    \n    tiempo_inicio <- Sys.time()\n    \n    inicio <- ((i - 1) * tamano_bloque) + 1\n    fin <- min(i * tamano_bloque, n)\n    \n    bloque <- data[inicio:fin, ] %>%\n      mutate(\n        started_at = fastPOSIXct(started_at),\n        ended_at = fastPOSIXct(ended_at),\n        duration = as.numeric(difftime(ended_at, started_at, units = \"mins\")),\n        month = month(started_at, label = TRUE),\n        day_of_week = wday(started_at, label = TRUE),\n        season = case_when(\n          month(started_at) %in% c(12, 1, 2) ~ \"Invierno\",\n          month(started_at) %in% c(3, 4, 5) ~ \"Primavera\",\n          month(started_at) %in% c(6, 7, 8) ~ \"Verano\",\n          month(started_at) %in% c(9, 10, 11) ~ \"Otoño\"\n        )\n      )\n    \n    resultado[[i]] <- bloque\n    \n    tiempo_fin <- Sys.time()\n    duracion <- round(difftime(tiempo_fin, tiempo_inicio, units = \"secs\"), 2)\n    cat(\"Bloque\", i, \"procesado en\", duracion, \"segundos.\\n\\n\")\n  \n  }\n  \n  bind_rows(resultado)\n}\n\ncitibike_data_cleaned <- procesar_en_bloques(citibike_data_cleaned, tamano_bloque = 1e5)\n\n  \ngc()  # Liberar memoria\n\n```\n\n### 2.2. Verificación de carga de datos\n\nEn esta sección, se verifica la cantidad de filas de cada archivo CSV leído para asegurarse de que todos los archivos se han cargado correctamente. La función map_int() se utiliza para contar las filas de cada archivo y luego se imprime el resultado para su revisión.\n\n```{r}\n# Verificar cuántas filas tiene cada archivo CSV leído\ntibble(archivo = files) %>%\n  mutate(filas = map_int(archivo, ~nrow(read_csv(.x)))) %>%\n  print(n = Inf)\n```\n\n## 3. Análisis exploratorio de los datos\n\n### 3.1. Resumen de los datos\n\nEsta sección proporciona una vista general del conjunto de datos limpio utilizando la función glimpse(), que muestra la estructura y las primeras filas de los datos. Además, se calculan estadísticas descriptivas de la variable duration para obtener una comprensión básica de la distribución de la duración de los viajes en el sistema de bicicletas.\n\n```{r}\n# Vista general de los datos\nglimpse(citibike_data_cleaned)\n\n# Estadísticas descriptivas de la duración de los viajes\nsummary(citibike_data_cleaned$duration)\n\n```\n\n### 3.2. Número de viajes por estación del año\n\nEn esta sección, se analiza el número de viajes realizados en el sistema de bicicletas por estación del año. Se transforma la variable season en un factor con el orden correcto de las estaciones (Primavera, Verano, Otoño, Invierno) y luego se cuenta el número de viajes por cada estación utilizando count(). Los resultados se visualizan en un gráfico de barras (geom_col()), con el eje X representando las estaciones y el eje Y el número de viajes.\n\n```{r}\ncitibike_data_cleaned %>%\n  mutate(season = factor(season, levels = c(\"Primavera\", \"Verano\", \"Otoño\", \"Invierno\"))) %>%\n  count(season) %>%\n  ggplot(aes(x = season, y = n, fill = season)) +\n  geom_col() +\n  labs(title = \"Número de viajes por estación del año\", x = \"Estación\", y = \"Número de viajes\") +\n  theme_minimal()\n\n```\n\n### 3.3. Distribución de viajes por tipo de usuario\n\nEn esta sección, se analiza la distribución de los viajes según el tipo de usuario, diferenciando entre miembros registrados y usuarios ocasionales (member_casual). Se cuenta el número de viajes realizados por cada tipo de usuario utilizando count(), y los resultados se visualizan mediante un gráfico de barras (geom_col()), con el eje X representando los tipos de usuario y el eje Y el número de viajes realizados. Esto permite observar cómo se distribuyen los viajes entre los usuarios frecuentes y los esporádicos.\n\n```{r}\ncitibike_data_cleaned %>%\n  count(member_casual) %>%\n  ggplot(aes(x = member_casual, y = n, fill = member_casual)) +\n  geom_col() +\n  labs(title = \"Distribución de viajes por tipo de usuario\", x = \"Tipo de usuario\", y = \"Número de viajes\") +\n  theme_minimal()\n\n```\n\n### 3.4. Duración promedio de los viajes por tipo de usuario\n\nEn este análisis se evalúa la duración promedio de los viajes en función del tipo de usuario, diferenciando entre miembros registrados y usuarios ocasionales (member_casual). Se calcula la duración promedio de los viajes agrupados por tipo de usuario y luego se visualiza utilizando un gráfico de barras. El gráfico permite observar las diferencias en la duración de los viajes entre los usuarios frecuentes y los esporádicos, lo cual puede ser útil para entender los patrones de uso del sistema de bicicletas.\n\n```{r}\ncitibike_data_cleaned %>%\n  group_by(member_casual) %>%\n  summarise(avg_duration = mean(duration, na.rm = TRUE)) %>%\n  ggplot(aes(x = member_casual, y = avg_duration, fill = member_casual)) +\n  geom_col() +\n  labs(title = \"Duración promedio de los viajes por tipo de usuario\", x = \"Tipo de usuario\", y = \"Duración promedio (minutos)\") +\n  theme_minimal()\n\n```\n\n### 3.5 Análisis del tipo de bicicleta\n\n```{r}\nlibrary(dplyr)\nlibrary(ggplot2)\n\n# Agrupar por tipo de bicicleta y contar\nbike_type_count <- citibike_data_cleaned %>%\n  filter(!is.na(rideable_type)) %>%\n  count(rideable_type, sort = TRUE)\n\n# Gráfico de barras\nggplot(bike_type_count, aes(x = reorder(rideable_type, n), y = n, fill = rideable_type)) +\n  geom_col() +\n  labs(title = \"Número de viajes por tipo de bicicleta\",\n       x = \"Tipo de bicicleta\",\n       y = \"Número de viajes\") +\n  theme_minimal() +\n  scale_fill_viridis_d()\n```\n\n## 4. Análisis Temporal Detallado\n\nEste análisis examina la evolución temporal de los viajes en el sistema de bicicletas, desglosado por tipo de usuario (miembro registrado vs. usuario ocasional). Para ello, se agrupan los datos por mes y tipo de usuario, y se calcula el total de viajes en cada periodo. El gráfico resultante muestra cómo varía el número de viajes mensualmente, permitiendo observar tendencias a lo largo del tiempo, y comparar el comportamiento de los usuarios frecuentes y esporádicos.\n\n### 4.1 Evolución Mensual de Viajes\n\n```{r}\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(lubridate)\n\n# Agrupar por mes y tipo de usuario\nmonthly_trips <- citibike_data_cleaned %>%\n  mutate(month = floor_date(started_at, \"month\")) %>%\n  group_by(month, member_casual) %>%\n  summarise(total_trips = n(), .groups = \"drop\")\n\n# Gráfico\nggplot(monthly_trips, aes(x = month, y = total_trips, color = member_casual)) +\n  geom_line(size = 1.2) +\n  labs(\n    title = \"Evolución mensual de viajes en Citi Bike\",\n    x = \"Mes\",\n    y = \"Número de viajes\",\n    color = \"Tipo de usuario\"\n  ) +\n  theme_minimal()\n\n```\n\n### 4.2 Viajes por Día de la Semana\n\n```{r}\n# Extraer día de la semana\ncitibike_data_cleaned <- citibike_data_cleaned %>%\n  mutate(weekday = wday(started_at, label = TRUE, week_start = 1))\n\n# Agrupar\nweekday_trips <- citibike_data_cleaned %>%\n  group_by(weekday, member_casual) %>%\n  summarise(total_trips = n(), .groups = \"drop\")\n\n# Gráfico\nggplot(weekday_trips, aes(x = weekday, y = total_trips, fill = member_casual)) +\n  geom_col(position = \"dodge\") +\n  labs(\n    title = \"Viajes por día de la semana\",\n    x = \"Día\",\n    y = \"Número de viajes\",\n    fill = \"Tipo de usuario\"\n  ) +\n  theme_minimal()\n\n```\n\n### 4.3 Distribución Horaria de Viajes\n\n```{r}\n# Extraer hora de inicio\ncitibike_data_cleaned <- citibike_data_cleaned %>%\n  mutate(hour = hour(started_at))\n\n# Gráfico\nggplot(citibike_data_cleaned, aes(x = hour, fill = member_casual)) +\n  geom_histogram(binwidth = 1, position = \"dodge\", color = \"black\") +\n  scale_x_continuous(breaks = 0:23) +\n  labs(\n    title = \"Distribución horaria de los viajes\",\n    x = \"Hora del día\",\n    y = \"Número de viajes\",\n    fill = \"Tipo de usuario\"\n  ) +\n  theme_minimal()\n\n```\n\n### 4.4. Duración promedio por estación del año\n\n```{r}\nlibrary(dplyr)\nlibrary(ggplot2)\n\ncitibike_data_cleaned %>%\n  group_by(season) %>%\n  summarise(avg_duration = mean(duration, na.rm = TRUE)) %>%\n  mutate(season = factor(season, levels = c(\"Primavera\", \"Verano\", \"Otoño\", \"Invierno\"))) %>%\n  ggplot(aes(x = season, y = avg_duration, fill = season)) +\n  geom_col() +\n  labs(title = \"Duración promedio por estación del año\", y = \"Duración (minutos)\")\n\n```\n\n### 4.5. Duración media del viaje por tipo de bicicleta\n\n```{r}\nlibrary(dplyr)\nlibrary(ggplot2)\n\n# Calcular la duración media por tipo de bicicleta\nbike_type_duration <- citibike_data_cleaned %>%\n  group_by(rideable_type) %>%\n  summarise(avg_duration = mean(duration, na.rm = TRUE))\n\n# Crear la gráfica\nggplot(bike_type_duration, aes(x = rideable_type, y = avg_duration, fill = rideable_type)) +\n  geom_col() +\n  labs(title = \"Duración promedio por tipo de bicicleta\", x = \"Tipo de bicicleta\", y = \"Duración promedio (minutos)\") +\n  theme_minimal()\n```\n\n## 5. Análisis Espacial de los Viajes\n\n### 5.1. Densidad de Viajes por Estación\n\n```{r}\nlibrary(dplyr)\nlibrary(ggplot2)\ninstall.packages(\"viridis\")   # Solo la primera vez\nlibrary(viridis)\n\n# Agrupar por estaciones de inicio\nstation_density <- citibike_data_cleaned %>%\n  group_by(start_station_name, start_lat, start_lng) %>%\n  summarise(total_trips = n(), .groups = \"drop\")\n\n# Crear el mapa de densidad de estaciones de inicio\nggplot(station_density, aes(x = start_lng, y = start_lat)) +\n  geom_point(aes(size = total_trips, color = total_trips), alpha = 0.7) +\n  scale_color_viridis() +\n  scale_size_continuous(range = c(1, 10)) +\n  labs(title = \"Densidad de viajes por estación de inicio\", x = \"Longitud\", y = \"Latitud\", size = \"Total de viajes\", color = \"Total de viajes\") +\n  theme_minimal()\n\n```\n\n### 5.2. Análisis de Viajes Más Frecuentes: Estaciones de Origen y Destino\n\n```{r}\nlibrary(dplyr)\nlibrary(ggplot2)\n\n# Top 10 estaciones de origen más frecuentes\ntop_start_stations <- citibike_data_cleaned %>%\n  filter(!is.na(start_station_name)) %>%\n  count(start_station_name, sort = TRUE) %>%\n  slice_max(n, n = 10)\n\n# Gráfica de estaciones de origen\nggplot(top_start_stations, aes(x = reorder(start_station_name, n), y = n, fill = start_station_name)) +\n  geom_col(show.legend = FALSE) +\n  coord_flip() +\n  labs(title = \"Top 10 estaciones de origen\",\n       x = \"Estación de inicio\",\n       y = \"Número de viajes\") +\n  theme_minimal()\n\n# Top 10 estaciones de destino más frecuentes\ntop_end_stations <- citibike_data_cleaned %>%\n  filter(!is.na(end_station_name)) %>%\n  count(end_station_name, sort = TRUE) %>%\n  slice_max(n, n = 10)\n\n# Gráfica de estaciones de destino\nggplot(top_end_stations, aes(x = reorder(end_station_name, n), y = n, fill = end_station_name)) +\n  geom_col(show.legend = FALSE) +\n  coord_flip() +\n  labs(title = \"Top 10 estaciones de destino\",\n       x = \"Estación de destino\",\n       y = \"Número de viajes\") +\n  theme_minimal()\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","embed-resources":true,"toc":true,"toc-depth":3,"number-sections":true,"output-file":"QuartoProject.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","editor":"visual","title":"Uso de bicicletas públicas en NYC: Un análisis estacional","author":"Enrique López-Mañas","code-summary":"Mostrar Código"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":[]}